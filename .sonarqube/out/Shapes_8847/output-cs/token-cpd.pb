é
PD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Shape\IFileManager.cs
	namespace 	
CSharpInformSystem
 
. 
Shape "
{ 
public 

	interface 
IFileManager !
{		 
void 
SaveList 
< 
T 
> 
( 
List 
< 
T 
>  
figures! (
,( )
string* 0
fileName1 9
)9 :
;: ;
List 
< 
T 
> 
LoadList 
< 
T 
> 
( 
string "
fileName# +
)+ ,
;, -
} 
} ”
JD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Shape\IShape.cs
	namespace 	
CSharpInformSystem
 
. 
Shape "
{ 
public 

	interface 
IShape 
{ 
float 
ComputeSquare 
( 
) 
; 
float 
ComputePerimeter 
( 
)  
;  !
} 
} •7
JD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\ShapeProgram.cs
	namespace 	
CSharpInformSystem
 
{ 
public 

class 
ShapeProgram 
{ 
private 
static 
readonly 
Random  &
Rnd' *
=+ ,
new- 0
Random1 7
(7 8
)8 9
;9 :
private 
static 
AbstractShape $
GenerateSingleShape% 8
(8 9
Type9 =
figure> D
)D E
{ 	
AbstractShape 
randomFigure &
=' (
null) -
;- .
if 
( 
figure 
== 
typeof  
(  !
Circle! '
)' (
)( )
{ 
randomFigure 
= 
new "
Circle# )
() *
Rnd* -
.- .
Next. 2
(2 3
$num3 4
,4 5
$num6 8
)8 9
,9 :
new; >
Point? D
(D E
RndE H
.H I
NextI M
(M N
-N O
$numO Q
,Q R
$numS U
)U V
,V W
RndX [
.[ \
Next\ `
(` a
-a b
$numb d
,d e
$numf h
)h i
)i j
)j k
;k l
} 
else 
if 
( 
figure 
== 
typeof %
(% &
Square& ,
), -
)- .
{ 
randomFigure   
=   
new   "
Square  # )
(  ) *
new  * -
Point  . 3
(  3 4
Rnd  4 7
.  7 8
Next  8 <
(  < =
-  = >
$num  > @
,  @ A
$num  B D
)  D E
,  E F
Rnd  G J
.  J K
Next  K O
(  O P
-  P Q
$num  Q S
,  S T
$num  U W
)  W X
)  X Y
,  Y Z
new  [ ^
Point  _ d
(  d e
Rnd  e h
.  h i
Next  i m
(  m n
-  n o
$num  o q
,  q r
$num  s u
)  u v
,  v w
Rnd  x {
.  { |
Next	  | Ä
(
  Ä Å
-
  Å Ç
$num
  Ç Ñ
,
  Ñ Ö
$num
  Ü à
)
  à â
)
  â ä
)
  ä ã
;
  ã å
}!! 
return## 
randomFigure## 
;##  
}$$ 	
private++ 
static++ 
List++ 
<++ 
AbstractShape++ )
>++) *
GenerateShapes+++ 9
(++9 :
int++: =
count++> C
)++C D
{,, 	
List-- 
<-- 
AbstractShape-- 
>-- 
shapes--  &
=--' (
new--) ,
List--- 1
<--1 2
AbstractShape--2 ?
>--? @
(--@ A
)--A B
;--B C
Type.. 
[.. 
].. 
figuresTypes.. 
=..  !
{.." #
typeof..$ *
(..* +
Circle..+ 1
)..1 2
,..2 3
typeof..4 :
(..: ;
Square..; A
)..A B
}..C D
;..D E
for00 
(00 
int00 
i00 
=00 
$num00 
;00 
i00 
<00 
count00  %
;00% &
i00' (
++00( *
)00* +
{11 
shapes22 
.22 
Insert22 
(22 
$num22 
,22  
GenerateSingleShape22! 4
(224 5
figuresTypes225 A
[22A B
Rnd22B E
.22E F
Next22F J
(22J K
$num22K L
,22L M
$num22N O
)22O P
]22P Q
)22Q R
)22R S
;22S T
}33 
return55 
shapes55 
;55 
}66 	
private;; 
static;; 
void;; 
Main;;  
(;;  !
);;! "
{<< 	
var== 
sfm== 
=== 
new== 
ShapeFileManager== *
(==* +
)==+ ,
;==, -
try>> 
{?? 
Console@@ 
.@@ 
	WriteLine@@ !
(@@! "
$str@@" 4
)@@4 5
;@@5 6
varAA 
shapesAA 
=AA 
sfmAA  
.AA  !
LoadListAA! )
<AA) *
AbstractShapeAA* 7
>AA7 8
(AA8 9
$strAA9 Q
)AAQ R
;AAR S
ConsoleBB 
.BB 
	WriteLineBB !
(BB! "
$strBB" 4
)BB4 5
;BB5 6
ListCC 
<CC 
AbstractShapeCC "
>CC" #
sortedShapesCC$ 0
=CC1 2
shapesCC3 9
.CC9 :
OrderByCC: A
(CCA B
sCCB C
=>CCD F
sCCG H
.CCH I
ComputeSquareCCI V
(CCV W
)CCW X
)CCX Y
.CCY Z
ToListCCZ `
(CC` a
)CCa b
;CCb c
ConsoleDD 
.DD 
	WriteLineDD !
(DD! "
$strDD" 6
)DD6 7
;DD7 8
varEE 
	posSelectEE 
=EE 
fromFF 
itemFF 
inFF  
shapesFF! '
whereGG 
itemGG 
.GG 
PinGG "
.GG" #
XGG# $
<GG% &
$numGG' (
&&GG) +
itemGG, 0
.GG0 1
PinGG1 4
.GG4 5
YGG5 6
<GG7 8
$numGG9 :
selectHH 
itemHH 
;HH  
ConsoleII 
.II 
	WriteLineII !
(II! "
$strII" A
)IIA B
;IIB C
sfmJJ 
.JJ 
SaveListJJ 
(JJ 
sortedShapesJJ )
,JJ) *
$strJJ+ F
)JJF G
;JJG H
sfmKK 
.KK 
SaveListKK 
(KK 
	posSelectKK &
.KK& '
ToListKK' -
(KK- .
)KK. /
,KK/ 0
$strKK1 K
)KKK L
;KKL M
ConsoleLL 
.LL 
	WriteLineLL !
(LL! "
$strLL" )
)LL) *
;LL* +
}MM 
catchNN 
(NN 
	ExceptionNN 
eNN 
)NN 
{OO 
ConsolePP 
.PP 
	WriteLinePP !
(PP! "
$strPP" 8
)PP8 9
;PP9 :
ConsoleQQ 
.QQ 
	WriteLineQQ !
(QQ! "
eQQ" #
.QQ# $
MessageQQ$ +
)QQ+ ,
;QQ, -
}RR 
ConsoleTT 
.TT 
ReadKeyTT 
(TT 
)TT 
;TT 
}UU 	
}VV 
}WW Ä
UD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str -
)- .
]. /
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str /
)/ 0
]0 1
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *¨
QD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Shape\AbstractShape.cs
	namespace 	
CSharpInformSystem
 
. 
Shape "
{ 
[		 
Serializable		 
]		 
[

 

XmlInclude

 
(

 
typeof

 
(

 
Circle

 
)

 
)

 
]

  
[ 

XmlInclude 
( 
typeof 
( 
Square 
) 
) 
]  
public 

abstract 
class 
AbstractShape '
:( )
IShape* 0
{ 
	protected 
AbstractShape 
(  
)  !
{ 	
} 	
	protected 
AbstractShape 
(  
Point  %
pin& )
)) *
{ 	
Pin 
= 
pin 
; 
} 	
public!! 
Point!! 
Pin!! 
{!! 
get!! 
;!! 
set!!  #
;!!# $
}!!% &
public'' 
abstract'' 
float'' 
ComputeSquare'' +
(''+ ,
)'', -
;''- .
public-- 
abstract-- 
float-- 
ComputePerimeter-- .
(--. /
)--/ 0
;--0 1
}.. 
}// Ñ
JD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Shape\Circle.cs
	namespace 	
CSharpInformSystem
 
. 
Shape "
{ 
[ 
Serializable 
] 
public		 

class		 
Circle		 
:		 
AbstractShape		 '
{

 
public 
Circle 
( 
) 
{ 	
} 	
public 
Circle 
( 
float 
r 
, 
Point $
center% +
)+ ,
:- .
base/ 3
(3 4
center4 :
): ;
{ 	
R 
= 
r 
; 
} 	
public 
float 
R 
{ 
get 
; 
set !
;! "
}# $
public%% 
override%% 
string%% 
ToString%% '
(%%' (
)%%( )
=>%%* ,
$"%%- /
Circle:\tR [%%/ ;
{%%; <
R%%< =
}%%= >
]\tCenter [%%> I
{%%I J
Pin%%J M
}%%M N
]%%N O
"%%O P
;%%P Q
public++ 
override++ 
float++ 
ComputeSquare++ +
(+++ ,
)++, -
=>++. 0
(++1 2
float++2 7
)++7 8
(++8 9
Math++9 =
.++= >
PI++> @
*++A B
Math++C G
.++G H
Pow++H K
(++K L
R++L M
,++M N
$num++O P
)++P Q
)++Q R
;++R S
public11 
override11 
float11 
ComputePerimeter11 .
(11. /
)11/ 0
=>111 3
(114 5
float115 :
)11: ;
(11; <
$num11< =
*11> ?
Math11@ D
.11D E
PI11E G
*11H I
R11J K
)11K L
;11L M
}22 
}33 Ì
ID:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Shape\Point.cs
	namespace 	
CSharpInformSystem
 
. 
Shape "
{ 
[ 
Serializable 
] 
public		 

struct		 
Point		 
{

 
public 
Point 
( 
float 
x 
, 
float #
y$ %
)% &
{ 	
X 
= 
x 
; 
Y 
= 
y 
; 
} 	
public 
float 
X 
{ 
get 
; 
set !
;! "
}# $
public 
float 
Y 
{ 
get 
; 
set !
;! "
}# $
public&& 
static&& 
Point&& 
operator&& $
-&&% &
(&&& '
Point&&' ,
a&&- .
,&&. /
Point&&0 5
b&&6 7
)&&7 8
=>&&9 ;
new&&< ?
Point&&@ E
(&&E F
a&&F G
.&&G H
X&&H I
-&&J K
b&&L M
.&&M N
X&&N O
,&&O P
a&&Q R
.&&R S
Y&&S T
-&&U V
b&&W X
.&&X Y
Y&&Y Z
)&&Z [
;&&[ \
public,, 
override,, 
string,, 
ToString,, '
(,,' (
),,( )
=>,,* ,
$",,- /
[,,/ 0
{,,0 1
X,,1 2
},,2 3
,,,3 4
{,,4 5
Y,,5 6
},,6 7
],,7 8
",,8 9
;,,9 :
}-- 
}.. Ï
TD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Shape\ShapeFileManager.cs
	namespace 	
CSharpInformSystem
 
. 
Shape "
{ 
public

 

class

 
ShapeFileManager

 !
:

" #
IFileManager

$ 0
{ 
public 
void 
SaveList 
< 
T 
> 
(  
List  $
<$ %
T% &
>& '
figures( /
,/ 0
string1 7
fileName8 @
)@ A
{ 	
File 
. 
WriteAllText 
( 
fileName &
,& '
string( .
.. /
Empty/ 4
)4 5
;5 6
using 
( 
var 
str 
= 
File !
.! "
Open" &
(& '
fileName' /
,/ 0
FileMode1 9
.9 :
Open: >
,> ?

FileAccess@ J
.J K
WriteK P
)P Q
)Q R
{ 
XmlSerializer 
xml !
=" #
new$ '
XmlSerializer( 5
(5 6
typeof6 <
(< =
List= A
<A B
AbstractShapeB O
>O P
)P Q
)Q R
;R S
xml 
. 
	Serialize 
( 
str !
,! "
figures# *
)* +
;+ ,
} 
} 	
public"" 
List"" 
<"" 
T"" 
>"" 
LoadList"" 
<""  
T""  !
>""! "
(""" #
string""# )
fileName""* 2
)""2 3
{## 	
List$$ 
<$$ 
T$$ 
>$$ 
shapes$$ 
;$$ 
using%% 
(%% 
var%% 
str%% 
=%% 
File%% !
.%%! "
Open%%" &
(%%& '
fileName%%' /
,%%/ 0
FileMode%%1 9
.%%9 :
Open%%: >
,%%> ?

FileAccess%%@ J
.%%J K
Read%%K O
)%%O P
)%%P Q
{&& 
XmlSerializer'' 
xml'' !
=''" #
new''$ '
XmlSerializer''( 5
(''5 6
typeof''6 <
(''< =
List''= A
<''A B
AbstractShape''B O
>''O P
)''P Q
)''Q R
;''R S
shapes(( 
=(( 
xml(( 
.(( 
Deserialize(( (
(((( )
str(() ,
)((, -
as((. 0
List((1 5
<((5 6
T((6 7
>((7 8
;((8 9
})) 
return++ 
shapes++ 
;++ 
},, 	
}-- 
}.. Ù
JD:\Studying\Programming\Projects\CSharpInformSystem\Shapes\Shape\Square.cs
	namespace 	
CSharpInformSystem
 
. 
Shape "
{ 
[ 
Serializable 
] 
public		 

class		 
Square		 
:		 
AbstractShape		 '
{

 
public 
Square 
( 
) 
{ 	
} 	
public 
Square 
( 
Point 
leftUpPoint '
,' (
Point) .
rightDownPoint/ =
)= >
:? @
baseA E
(E F
leftUpPointF Q
)Q R
{ 	
RightDownPoint 
= 
rightDownPoint +
;+ ,
if 
( 
! 
( 
Pin 
. 
X 
<= 
RightDownPoint )
.) *
X* +
&&, .
Pin/ 2
.2 3
Y3 4
>=5 7
RightDownPoint8 F
.F G
YG H
)H I
)I J
{ 
Point 
swap 
= 
Pin  
;  !
Pin 
= 
RightDownPoint $
;$ %
RightDownPoint 
=  
swap! %
;% &
} 
}   	
public%% 
Point%% 
RightDownPoint%% #
{%%$ %
get%%& )
;%%) *
set%%+ .
;%%. /
}%%0 1
public++ 
override++ 
string++ 
ToString++ '
(++' (
)++( )
=>++* ,
$"++- /$
Square:\tLeft up point [++/ G
{++G H
Pin++H K
}++K L
] Right down point[++L _
{++_ `
RightDownPoint++` n
}++n o
]++o p
"++p q
;++q r
public11 
override11 
float11 
ComputeSquare11 +
(11+ ,
)11, -
{22 	
Point33 
	normPoint33 
=33 
Pin33 !
-33" #
RightDownPoint33$ 2
;332 3
float44 
square44 
=44 
Math44 
.44  
Abs44  #
(44# $
	normPoint44$ -
.44- .
X44. /
*440 1
	normPoint442 ;
.44; <
Y44< =
)44= >
;44> ?
return55 
square55 
;55 
}66 	
public<< 
override<< 
float<< 
ComputePerimeter<< .
(<<. /
)<</ 0
{== 	
Point>> 
	normPoint>> 
=>> 
Pin>> !
->>" #
RightDownPoint>>$ 2
;>>2 3
return?? 
Math?? 
.?? 
Abs?? 
(?? 
	normPoint?? %
.??% &
X??& '
*??( )
$num??* +
+??, -
	normPoint??. 7
.??7 8
Y??8 9
*??: ;
$num??< =
)??= >
;??> ?
}@@ 	
}AA 
}BB 